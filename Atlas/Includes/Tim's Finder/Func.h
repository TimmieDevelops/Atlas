#pragma once

#include "Address.h"
#include <Windows.h>

// Engine Version: 4.19
// Fortnite Version: 3807424

// Automatically generated by OffsetFinder

// OffsetFinder Dumper created with care by @Tim2025

class Func
{
public:
    inline static uintptr_t ImageBase = uintptr_t(GetModuleHandle(0));
     inline static bool (*InitHost)(class AOnlineBeaconHost* This) = (bool(*)(class AOnlineBeaconHost* This))(ImageBase + OFFSET_InitHost); // AOnlineBeaconHost::InitHost
     inline static void (*FMemoryFree)(void* Array) = (void(*)(void* Array))(ImageBase + OFFSET_FMemoryFree); // FMemory::Free
     inline static void (*SetWorld)(class UNetDriver* This, class UWorld* InWorld) = (void(*)(class UNetDriver* This, class UWorld* InWorld))(ImageBase + OFFSET_SetWorld); // UNetDriver::SetWorld
     inline static bool (*InitListen)(class UNetDriver* This /*UIpNetDriver* This*/, class UWorld* InNotify, struct FURL& LocalURL, bool bReuseAddressAndPort, class FString& Error) = (bool(*)(class UNetDriver* This /*UIpNetDriver* This*/, class UWorld* InNotify, struct FURL& LocalURL, bool bReuseAddressAndPort, class FString& Error))(ImageBase + OFFSET_InitListen); //  UIpNetDriver::InitListen
     inline static void (*PauseBeaconRequests)(class AOnlineBeacon* This, bool bPause) = (void(*)(class AOnlineBeacon* This, bool bPause))(ImageBase + OFFSET_PauseBeaconRequests); // AOnlineBeacon::PauseBeaconRequests
     inline static void* (*FMemoryRealloc)(void*, uint64, uint32) = (void*(*)(void*, uint64, uint32))(ImageBase + OFFSET_FMemoryRealloc); // FMemory::Realloc
     inline static void (*CallPreReplication)(class AActor* This, class UNetDriver* NetDriver) = (void(*)(class AActor* This, class UNetDriver* NetDriver))(ImageBase + OFFSET_CallPreReplication); // AActor::CallPreReplication
     inline static void (*SendClientAdjustment)(class APlayerController* This) = (void(*)(class APlayerController* This))(ImageBase + OFFSET_SendClientAdjustment); // APlayerController::SendClientAdjustment
     inline static bool (*IsRelevancyOwnerFor)(class AActor* This, const class AActor* ReplicatedActor, const class AActor* ActorOwner, const class AActor* ConnectionActor) = (bool(*)(class AActor* This, const class AActor* ReplicatedActor, const class AActor* ActorOwner, const class AActor* ConnectionActor))(ImageBase + OFFSET_IsRelevancyOwnerFor); // AActor::IsRelevancyOwnerFor
     inline static int32 (*ActorChannelClose)(class UActorChannel* This) = (int32(*)(class UActorChannel* This))(ImageBase + OFFSET_ActorChannelClose); // UActorChannel::Close
     inline static bool (*ClientHasInitializedLevelFor)(const class UNetConnection* This, const class AActor* TestActor) = (bool(*)(const class UNetConnection* This, const class AActor* TestActor))(ImageBase + OFFSET_ClientHasInitializedLevelFor); // UNetConnection::ClientHasInitializedLevelFor
     inline static class UChannel* (*CreateChannel)(class UNetConnection* This, /*Add EChannelType to your file*/ __int64 ChType, bool bOpenedLocally, int32 ChIndex) = (class UChannel*(*)(class UNetConnection* This, /*Add EChannelType to your file*/ __int64 ChType, bool bOpenedLocally, int32 ChIndex))(ImageBase + OFFSET_CreateChannel); // UNetConnection::CreateChannel
     inline static void (*SetChannelActor)(class UActorChannel* This, class AActor* InActor) = (void(*)(class UActorChannel* This, class AActor* InActor))(ImageBase + OFFSET_SetChannelActor); // UActorChannel::SetChannelActor
     inline static int64 (*ReplicateActor)(class UActorChannel* This) = (int64(*)(class UActorChannel* This))(ImageBase + OFFSET_ReplicateActor); // UActorChannel::ReplicateActor
     inline static bool (*IsNetRelevantFor)(const class AActor* This, const class AActor* RealViewer, const class AActor* ViewTarget, const struct FVector& SrcLocation) = (bool(*)(const class AActor* This, const class AActor* RealViewer, const class AActor* ViewTarget, const struct FVector& SrcLocation))(ImageBase + OFFSET_IsNetRelevantFor); // AActor::IsNetRelevantFor
     inline static bool (*InternalTryActivateAbility)(class UAbilitySystemComponent* This, struct FGameplayAbilitySpecHandle Handle, struct FPredictionKey InPredictionKey, class UGameplayAbility** OutInstancedAbility, /*FOnGameplayAbilityEnded::FDelegate*/ void* OnGameplayAbilityEndedDelegate, const struct FGameplayEventData* TriggerEventData) = (bool(*)(class UAbilitySystemComponent* This, struct FGameplayAbilitySpecHandle Handle, struct FPredictionKey InPredictionKey, class UGameplayAbility** OutInstancedAbility, /*FOnGameplayAbilityEnded::FDelegate*/ void* OnGameplayAbilityEndedDelegate, const struct FGameplayEventData* TriggerEventData))(ImageBase + OFFSET_InternalTryActivateAbility); // UAbilitySystemComponent::InternalTryActivateAbility
     inline static struct FGameplayAbilitySpecHandle (*GiveAbilityAndActivateOnce)(class UAbilitySystemComponent* This, const struct FGameplayAbilitySpec& Spec) = (struct FGameplayAbilitySpecHandle(*)(class UAbilitySystemComponent* This, const struct FGameplayAbilitySpec& Spec))(ImageBase + OFFSET_GiveAbilityAndActivateOnce); // UAbilitySystemComponent::GiveAbilityAndActivateOnce
     inline static struct FGameplayAbilitySpecHandle (*GiveAbility)(class UAbilitySystemComponent* This, const struct FGameplayAbilitySpec& Spec) = (struct FGameplayAbilitySpecHandle(*)(class UAbilitySystemComponent* This, const struct FGameplayAbilitySpec& Spec))(ImageBase + OFFSET_GiveAbility); // UAbilitySystemComponent::GiveAbility
     inline static __int64 (*CantBuild)(class UWorld * a1, class UObject * a2, struct FVector a3, struct FRotator a4, char a5, void* a6, char* a7) = (__int64(*)(class UWorld * a1, class UObject * a2, struct FVector a3, struct FRotator a4, char a5, void* a6, char* a7))(ImageBase + OFFSET_CantBuild); // idk
     inline static class ABuildingSMActor* (*ReplaceBuildingActor)(class ABuildingSMActor * a1, unsigned int a2, class UClass* a3, unsigned int a4, int a5, bool a6, class AFortPlayerController* a7) = (class ABuildingSMActor*(*)(class ABuildingSMActor * a1, unsigned int a2, class UClass* a3, unsigned int a4, int a5, bool a6, class AFortPlayerController* a7))(ImageBase + OFFSET_ReplaceBuildingActor); // ABuildingSMActor::ReplaceBuildingActor
     inline static void (*ApplyCharacterCustomization)(class AFortPlayerState* This, class AFortPawn* Pawn) = (void(*)(class AFortPlayerState* This, class AFortPawn* Pawn))(ImageBase + OFFSET_ApplyCharacterCustomization); // AFortPlayerState::ApplyCharacterCustomization
     inline static class UNetDriver* (*CreateNetDriver)(class UEngine* This, class UWorld *InWorld, class FName NetDriverDefinition) = (class UNetDriver*(*)(class UEngine* This, class UWorld *InWorld, class FName NetDriverDefinition))(ImageBase + OFFSET_CreateNetDriver); // UEngine::CreateNetDriver
     inline static void (*AddToAlivePlayers)(class AFortGameModeAthena* GameMode, class AFortPlayerControllerAthena* Player) = (void(*)(class AFortGameModeAthena* GameMode, class AFortPlayerControllerAthena* Player))(ImageBase + OFFSET_AddToAlivePlayers); // AFortGameModeAthena::AddToAlivePlayers
     inline static void (*RemoveFromAlivePlayers)(class AFortGameModeAthena* GameMode, class AFortPlayerControllerAthena* Player, class APlayerState* PlayerState, class AFortPlayerPawn* Pawn, class UFortWeaponItemDefinition* Weapon, uint8_t DeathCause, char a7) = (void(*)(class AFortGameModeAthena* GameMode, class AFortPlayerControllerAthena* Player, class APlayerState* PlayerState, class AFortPlayerPawn* Pawn, class UFortWeaponItemDefinition* Weapon, uint8_t DeathCause, char a7))(ImageBase + OFFSET_RemoveFromAlivePlayers); // AFortGameModeAthena::RemoveFromAlivePlayers
};
